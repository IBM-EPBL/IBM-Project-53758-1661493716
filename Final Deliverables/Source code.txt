*****TEXT TO SPEECH*****




from ibm_watson import TextToSpeechV1
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator
url = “https://api.eu-gb.text-to-speech.watson.cloud.ibm.com/instances/8e5bc662-
02f5-4cc3-b2a3-27086673e789”
api = “QGXbVq1lTgSFNn8_7wpT1kGVYIKCHG8NLfHnG1BBXNwj”
auth = IAMAuthenticator(api)
tts = TextToSpeechV1(authenticator=auth)
tts.set_service_url(url)
a = {“command”:[“Dart”,”Paracetamol”,”Dolo-650”]}
instruction = “Please Take following Medicine.”
for i in a[“command”]:
instruction+=i
instruction+=” “
with open (“./speech.mp3”,”wb”) as audio_file:
res = tts.synthesize(instruction,accept = “audio/mp3”,voice = ‘enus_AllisonV3Voice’).get_result()
audio_file.write(res.content)


*****DB CONNECTION*****




import time
import sys
import ibmiotf.application
import ibmiotf.device
import random

#Provide your IBM Watson Device Credentials
organization = "kizp10"
deviceType = "IOTdevice"
deviceId = "1234567890"
authMethod = "token"
authToken = "1234567890"

# Initialize GPIO
def myCommandCallback(cmd):
    print("Command received: %s" % cmd.data['command'])
    status=cmd.data['command']
    if status=="lighton":
        print ("led is on")
    elif status == "lightoff":
        print ("led is off")
    else :
        print ("please send proper command")

try:
	deviceOptions = {"org": organization, "type": deviceType, "id": deviceId, "auth-method": authMethod, "auth-token": authToken}
	deviceCli = ibmiotf.device.Client(deviceOptions)
	#..............................................
	
except Exception as e:
	print("Caught exception connecting device: %s" % str(e))
	sys.exit()

# Connect and send a datapoint "hello" with value "world" into the cloud as an event of type "greeting" 10 times
deviceCli.connect()

while True:
        #Get Sensor Data from DHT11
        
        temp=random.randint(90,110)
        Humid=random.randint(60,100)
        
        data = { 'temp' : temp, 'Humid': Humid }
        #print data
        def myOnPublishCallback():
            print ("Published Temperature = %s C" % temp, "Humidity = %s %%" % Humid, "to IBM Watson")

        success = deviceCli.publishEvent("IoTSensor", "json", data, qos=0, on_publish=myOnPublishCallback)
        if not success:
            print("Not connected to IoTF")
        time.sleep(10)
        
        deviceCli.commandCallback = myCommandCallback

# Disconnect the device and application from the cloud
deviceCli.disconnect()




*****USER LOGIN*****




<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Welcome To Login Form</title>

<!-- Complete css for whole page. -->
<style type="text/css">
/* body css for whole page */
body
{
	margin:0px;
	background-image: url("https://www.pixelstalk.net/wp-content/uploads/images1/Medical-Background-download-free.png");
      background-size: cover;
	color:#f9fcf5;
	font-family:Arial, Helvetica, sans-serif;
}
#main{width:600px; height:260px; margin-left:auto; margin-right:auto; border-radius:5px; padding-left:10px; margin-top:100px;
border-top:3px double #f1f1f1; border-bottom:3px double #f1f1f1;border-right:3px double #f1f1f1;border-left:3px double #f1f1f1; padding-top:20px;
}
#main table{font-family:"Comic Sans MS", cursive;}
/* css code for textbox */
#main .tb{height:28px; width:230px; border:1px solid #27a465; color:#27a465; font-weight:bold; border-left:5px solid #f7f7f7; opacity:0.9;}
#main .tb:focus{height:28px; border:1px solid #27a465; outline:none; border-left:5px solid #f7f7f7;}

/* css code for button*/
#main .btn{width:60%; height:32px; outline:none; font-weight:bold; border:0px solid #27a465; text-shadow: 0px 0.5px 0.5px #fff;	
  border-radius: 2px; font-weight: 600; color: white; letter-spacing: 1px; font-size:14px;
  background-color:black; -webkit-transition: 1s; -moz-transition: 1s; transition: 1s;}
  
#main .btn:hover{background-color:grey; outline:none;  border-radius: 2px; color:#f1f1f1; border:1px solid #f1f1f1;-webkit-transition: 1s; -moz-transition: 1s; transition: 1s; }
</style>
<!-- Css ending here. -->

<!-- Complete javascript for login. -->
<!-- Add url of javascript -->
<script type="text/javascript" src="jquery-1.6.min.js"></script>
<!-- Java Script -->
<script>

	function login()
	{
		var uname = document.getElementById("email").value;
		var pwd = document.getElementById("pwd1").value;
		var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
		if(uname =='')
		{
			alert("please enter user name.");
		}
		else if(pwd=='')
		{
        	alert("enter the password");
		}
		else if(pwd=="balaji@123" && uname=="saibalaji" )
		{
				alert('Login Success...Redirecting to Dashboard');
  //Redirecting to other page or webste code or you can set your own html page.
       window.location = "https://node-red-enlbv-2022-11-04.mybluemix.net/ui/";
		}
		else
		{
           alert("Invalid Login Credentials");
			}
	}				    
	function clearFunc()
	{
		document.getElementById("email").value="";
		document.getElementById("pwd1").value="";
	}
        </script>
<!-- Javascript ending here.. -->        
</head>

<body>
<!-- Main div code -->
	<div id="main">
	<div class="h-tag">
	<h2><center><font color="black">Login Form</font></center></h2>
	</div>
	<!-- Login box -->
	<div class="login">
	<table cellspacing="2" align="center" cellpadding="8" border="0">
	<tr>
	<td><font color="black">Enter User Name :</font></td>
	<td><input type="text" placeholder="Enter user name here" id="email" class="tb" /></td>
	</tr>
	<tr>
	<td><font color="black">Enter Password :</font></td>
	<td><input type="password" placeholder="Enter Password here" id="pwd1" class="tb" /></td>
	</tr>
	<tr>
	<td></td>
	<td>
	<input type="submit" value="Login" class="btn" onClick="login()" /></td>
	</tr>
	</table>
	</div>
  	 <!-- login box div ending here.. -->
	</div>
	<!-- Main div ending here... -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-88667581-1', 'auto');
  ga('send', 'pageview');
</script>
</body>
</html>



*****DEVICE SIMULATION CODE*****




#include <WiFi.h>  //library for wifi
#include <PubSubClient.h>  //library for MQtt
#include <LiquidCrystal_I2C.h>
#include "DHT.h"   // Library for dht11
#define DHTPIN 15  // what pin we're connected to
#define DHTTYPE DHT11  // define type of sensor DHT 11
#define LED 2
DHT dht (DHTPIN, DHTTYPE); // creating the instance by passing pin and typr of dht
connected
void callback(char* subscribetopic, byte* payload, unsigned int payloadLength);


//-------credentials of IBM Accounts------
#define ORG "kizp10"  //IBM ORGANITION ID
#define DEVICE_TYPE "IOTdevice"  //Device type mentioned in ibm watson IOT Platform
#define DEVICE_ID "1234567890"  //Device ID mentioned in ibm watson IOT Platform
#define TOKEN "1234567890" //Token
String data3="";
int buzz= 13;


//-------- Customise the above values --------
char server[] = ORG ".messaging.internetofthings.ibmcloud.com"; // Server Name
char publishTopic[] = "iot-2/evt/Data/fmt/json";  // topic name and type of event
perform and format in which data to be send
char subscribetopic[] = "iot-2/cmd/command/fmt/String"; // cmd REPRESENT command
type AND COMMAND IS TEST OF FORMAT STRING
char authMethod[] = "use-token-auth";  // authentication method
char token[] = TOKEN;
char clientId[] = "d:" ORG ":" DEVICE_TYPE ":" DEVICE_ID;  //client id
LiquidCrystal_I2C lcd(0x27,16,2);


//-----------------------------------------
WiFiClient wifiClient; // creating the instance for wificlient
PubSubClient client(server, 1883, callback ,wifiClient); //calling the predefined
client id by passing parameter like server id,portand wificredential
void setup()  // configureing the ESP32
{
Serial.begin(115200);
pinMode(LED,OUTPUT);
delay(10);
Serial.println();
wificonnect();
mqttconnect();
}
void loop()// Recursive Function
{
if (!client.loop()) {
mqttconnect();
}
}



/*.....................................retrieving to
Cloud...............................*/
void mqttconnect() {
if (!client.connected()) {
Serial.print("Reconnecting client to ");
Serial.println(server);
while (!!!client.connect(clientId, authMethod, token)) {
Serial.print(".");
delay(500);
}
initManagedDevice();
Serial.println();
}
}
void wificonnect() //function defination for wificonnect
{
Serial.println();
Serial.print("Connecting to ");
WiFi.begin("Wokwi-GUEST", "", 6); //passing the wifi credentials to establish
the connection
while (WiFi.status() != WL_CONNECTED) {
delay(500);
Serial.print(".");
}
Serial.println("");
Serial.println("WiFi connected");
Serial.println("IP address: ");
Serial.println(WiFi.localIP());
}
void initManagedDevice() {
if (client.subscribe(subscribetopic)) {
Serial.println((subscribetopic));
Serial.println("subscribe to cmd OK");
} else {
Serial.println("subscribe to cmd FAILED");
}
}
void callback(char* subscribetopic, byte* payload, unsigned int payloadLength)
{
Serial.print("callback invoked for topic: ");
Serial.println(subscribetopic);
for (int i = 0; i < payloadLength; i++) {
//Serial.print((char)payload[i]);
data3 += (char)payload[i];
}
Serial.println("Please take your medicines”);
if(data3 != "")
{
lcd.init();
lcd.print("Its time for your medicine”);
digitalWrite(LED,HIGH);
delay(20000);
digitalWrite(LED,LOW);
}
else
{
digitalWrite(LED,LOW);
}
data3="";
}

